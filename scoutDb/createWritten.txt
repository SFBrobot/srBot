
2a. This program was written in C++. It takes the results from all of the qualifications matches of a robotics tournament and analyzes the scores to determine how good each team actually is, then ranks them. The video shows the program executed with data from a simulated tournament of 16 teams and 16 matches.

2b. While writing this program, I encountered several difficulties. Most of these were caused by me not knowing how to use pointers in C++ properly and were resolved with a quick trip to Stack Overflow. However, I did need to resolve a few challenges. The program needs to be able to run with about 100 teams. This can cause significant memory issues, especially once the program reaches the analytical stage. At that point, 2 square matrices, each with a size of the team count, are created. A tournament of 100 teams would require 2 * 100^2 variables, each of which is an 8-byte double, or 160,000 bytes (156.25 KB). This memory consumption is acceptable when the tournament does have 100 teams, but it is an inordinate amount of memory needed at smaller tournaments, such as those with 24 teams. To solve this, I needed to implement variable-length arrays (VLAs) using the malloc() function to assign blocks of memory dynamically. This required me to rewrite the way I create the square matrices. Instead of creating 2D arrays, I needed one-dimensional arrays to use malloc(). My solution was to mimic how the compiler handles 2D arrays by mutliplying the row index by the size of each row and offsetting by that many bytes.